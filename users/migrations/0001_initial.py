# Generated by Django 5.2.4 on 2025-07-29 21:16

import django.contrib.auth.models
import django.contrib.auth.validators
import django.utils.timezone
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('email', models.EmailField(help_text="User's email address", max_length=254, unique=True)),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now, help_text='Account creation timestamp')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Last profile update timestamp')),
                ('default_analysis_period', models.IntegerField(default=6, help_text='Default analysis period in months')),
                ('risk_tolerance', models.CharField(choices=[('conservative', 'Conservative'), ('moderate', 'Moderate'), ('aggressive', 'Aggressive')], default='moderate', help_text="User's risk tolerance level", max_length=20)),
                ('last_analysis_date', models.DateTimeField(blank=True, help_text="Timestamp of user's last analysis", null=True)),
                ('total_analyses_count', models.PositiveIntegerField(default=0, help_text='Total number of analyses performed by user')),
                ('is_premium', models.BooleanField(default=False, help_text='Premium account status (for future use)')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'MapleTrade User',
                'verbose_name_plural': 'MapleTrade Users',
                'db_table': 'mapletrade_users',
                'indexes': [models.Index(fields=['email'], name='mapletrade__email_6249ba_idx'), models.Index(fields=['created_at'], name='mapletrade__created_4e75ac_idx'), models.Index(fields=['last_analysis_date'], name='mapletrade__last_an_0ab936_idx')],
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
