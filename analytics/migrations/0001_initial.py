# Generated by Django 4.2.7 on 2025-08-02 22:51

import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('data', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='AnalysisResult',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('analysis_date', models.DateTimeField(default=django.utils.timezone.now, help_text='When analysis was performed')),
                ('analysis_period_months', models.IntegerField(default=6, help_text='Analysis period in months')),
                ('signal', models.CharField(choices=[('BUY', 'Buy'), ('HOLD', 'Hold'), ('SELL', 'Sell')], help_text='Investment recommendation', max_length=4)),
                ('confidence', models.DecimalField(decimal_places=4, default=0, help_text='Confidence score (0-1)', max_digits=5)),
                ('stock_return', models.DecimalField(blank=True, decimal_places=4, help_text='Stock return percentage', max_digits=10, null=True)),
                ('sector_return', models.DecimalField(blank=True, decimal_places=4, help_text='Sector ETF return percentage', max_digits=10, null=True)),
                ('outperformance', models.DecimalField(blank=True, decimal_places=4, help_text='Stock outperformance vs sector', max_digits=10, null=True)),
                ('volatility', models.DecimalField(blank=True, decimal_places=4, help_text='Annualized volatility percentage', max_digits=10, null=True)),
                ('current_price', models.DecimalField(blank=True, decimal_places=4, help_text='Stock price at analysis time', max_digits=12, null=True)),
                ('target_price', models.DecimalField(blank=True, decimal_places=4, help_text='Analyst target price at analysis time', max_digits=12, null=True)),
                ('outperformed_sector', models.BooleanField(default=False, help_text='Stock outperformed sector ETF')),
                ('target_above_price', models.BooleanField(default=False, help_text='Target price above current')),
                ('volatility_below_threshold', models.BooleanField(default=False, help_text='Volatility below sector threshold')),
                ('sector_name', models.CharField(blank=True, help_text='Sector name at time of analysis', max_length=100)),
                ('sector_etf', models.CharField(blank=True, help_text='Sector ETF used for comparison', max_length=10)),
                ('sector_volatility_threshold', models.DecimalField(blank=True, decimal_places=4, help_text='Sector volatility threshold at time of analysis', max_digits=5, null=True)),
                ('rationale', models.TextField(blank=True, help_text='Explanation for the recommendation')),
                ('engine_version', models.CharField(default='1.0.0', help_text='Analytics engine version', max_length=20)),
                ('errors', models.JSONField(blank=True, default=list, help_text='Any errors during analysis')),
                ('raw_data', models.JSONField(blank=True, default=dict, help_text='Complete analysis data')),
                ('is_valid', models.BooleanField(default=True, help_text='Whether this analysis is still valid')),
            ],
            options={
                'db_table': 'mapletrade_analysis_results',
                'ordering': ['-analysis_date'],
            },
        ),
        migrations.CreateModel(
            name='RecommendationHistory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('previous_signal', models.CharField(blank=True, choices=[('BUY', 'Buy'), ('SELL', 'Sell'), ('HOLD', 'Hold')], help_text='Previous recommendation signal', max_length=4, null=True)),
                ('new_signal', models.CharField(choices=[('BUY', 'Buy'), ('SELL', 'Sell'), ('HOLD', 'Hold')], help_text='New recommendation signal', max_length=4)),
                ('change_reason', models.TextField(help_text='Explanation for the recommendation change')),
                ('price_at_change', models.DecimalField(decimal_places=4, help_text='Stock price when recommendation changed', max_digits=12)),
            ],
            options={
                'db_table': 'mapletrade_recommendation_history',
            },
        ),
        migrations.CreateModel(
            name='SectorAnalysis',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('analysis_date', models.DateField(help_text='Date of sector analysis')),
                ('avg_return', models.DecimalField(decimal_places=4, help_text='Average return of stocks in sector', max_digits=10)),
                ('avg_volatility', models.DecimalField(decimal_places=4, help_text='Average volatility of stocks in sector', max_digits=10)),
                ('buy_count', models.IntegerField(default=0, help_text='Number of BUY recommendations in sector')),
                ('hold_count', models.IntegerField(default=0, help_text='Number of HOLD recommendations in sector')),
                ('sell_count', models.IntegerField(default=0, help_text='Number of SELL recommendations in sector')),
                ('top_performers', models.JSONField(default=list, help_text='List of top performing stocks in sector')),
            ],
            options={
                'db_table': 'mapletrade_sector_analysis',
            },
        ),
        migrations.CreateModel(
            name='TechnicalIndicator',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('date', models.DateField(help_text='Date of the indicator calculation')),
                ('sma_20', models.DecimalField(blank=True, decimal_places=4, help_text='20-day Simple Moving Average', max_digits=12, null=True)),
                ('sma_50', models.DecimalField(blank=True, decimal_places=4, help_text='50-day Simple Moving Average', max_digits=12, null=True)),
                ('sma_200', models.DecimalField(blank=True, decimal_places=4, help_text='200-day Simple Moving Average', max_digits=12, null=True)),
                ('ema_12', models.DecimalField(blank=True, decimal_places=4, help_text='12-day Exponential Moving Average', max_digits=12, null=True)),
                ('ema_26', models.DecimalField(blank=True, decimal_places=4, help_text='26-day Exponential Moving Average', max_digits=12, null=True)),
                ('rsi_14', models.DecimalField(blank=True, decimal_places=2, help_text='14-day Relative Strength Index', max_digits=5, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('macd', models.DecimalField(blank=True, decimal_places=4, help_text='MACD Line', max_digits=12, null=True)),
                ('macd_signal', models.DecimalField(blank=True, decimal_places=4, help_text='MACD Signal Line', max_digits=12, null=True)),
                ('macd_histogram', models.DecimalField(blank=True, decimal_places=4, help_text='MACD Histogram', max_digits=12, null=True)),
                ('bollinger_upper', models.DecimalField(blank=True, decimal_places=4, help_text='Bollinger Upper Band', max_digits=12, null=True)),
                ('bollinger_middle', models.DecimalField(blank=True, decimal_places=4, help_text='Bollinger Middle Band (20-day SMA)', max_digits=12, null=True)),
                ('bollinger_lower', models.DecimalField(blank=True, decimal_places=4, help_text='Bollinger Lower Band', max_digits=12, null=True)),
                ('volume_sma_20', models.BigIntegerField(blank=True, help_text='20-day average volume', null=True)),
                ('stock', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='technical_indicators', to='data.stock')),
            ],
            options={
                'db_table': 'mapletrade_technical_indicators',
            },
        ),
        migrations.CreateModel(
            name='StockAnalysis',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('sector_etf', models.CharField(help_text='Sector ETF used for comparison', max_length=10)),
                ('analysis_period_months', models.IntegerField(default=6, help_text='Analysis lookback period in months', validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(60)])),
                ('analysis_end_date', models.DateTimeField(default=django.utils.timezone.now, help_text='End date of the analysis period')),
                ('signal', models.CharField(choices=[('BUY', 'Buy'), ('SELL', 'Sell'), ('HOLD', 'Hold')], db_index=True, help_text='Buy/Sell/Hold recommendation', max_length=4)),
                ('confidence_score', models.DecimalField(decimal_places=2, help_text='Confidence in the recommendation (0-1)', max_digits=3, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1)])),
                ('stock_return', models.DecimalField(decimal_places=4, help_text='Stock return over analysis period', max_digits=10)),
                ('sector_return', models.DecimalField(decimal_places=4, help_text='Sector ETF return over analysis period', max_digits=10)),
                ('relative_performance', models.DecimalField(decimal_places=4, help_text='Stock return minus sector return', max_digits=10)),
                ('volatility', models.DecimalField(decimal_places=4, help_text='Annualized volatility', max_digits=10, validators=[django.core.validators.MinValueValidator(0)])),
                ('volatility_threshold', models.DecimalField(decimal_places=4, help_text='Sector-specific volatility threshold used', max_digits=5)),
                ('is_high_volatility', models.BooleanField(default=False, help_text='Whether volatility exceeds sector threshold')),
                ('current_price', models.DecimalField(decimal_places=4, help_text='Stock price at analysis time', max_digits=12)),
                ('analyst_target', models.DecimalField(blank=True, decimal_places=4, help_text='Consensus analyst target price', max_digits=12, null=True)),
                ('target_upside', models.DecimalField(blank=True, decimal_places=4, help_text='Percentage upside to target price', max_digits=10, null=True)),
                ('outperformed_sector', models.BooleanField(default=False, help_text='Whether stock outperformed its sector')),
                ('positive_analyst_outlook', models.BooleanField(default=False, help_text='Whether analyst target > current price')),
                ('analysis_data', models.JSONField(default=dict, help_text='Detailed analysis data and intermediate calculations')),
                ('rationale', models.TextField(help_text='Human-readable explanation of the recommendation')),
                ('rationale_details', models.JSONField(default=dict, help_text='Structured rationale with contributing factors')),
                ('analysis_duration_ms', models.IntegerField(blank=True, help_text='Time taken to perform analysis in milliseconds', null=True)),
                ('data_quality_score', models.DecimalField(blank=True, decimal_places=2, help_text='Quality score of underlying data (0-1)', max_digits=3, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1)])),
                ('stock', models.ForeignKey(help_text='Stock being analyzed', on_delete=django.db.models.deletion.CASCADE, related_name='detailed_analyses', to='data.stock')),
            ],
            options={
                'db_table': 'mapletrade_stock_analysis',
                'ordering': ['-created_at'],
            },
        ),
    ]
