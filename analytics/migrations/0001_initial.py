# Generated by Django 4.2.7 on 2025-07-31 17:31

from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Sector',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True)),
                ('code', models.CharField(max_length=10, unique=True)),
                ('etf_symbol', models.CharField(help_text='ETF symbol for sector benchmark', max_length=10)),
                ('volatility_threshold', models.FloatField(default=0.25, help_text='Volatility threshold for risk assessment', validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(1.0)])),
                ('description', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Stock',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('symbol', models.CharField(db_index=True, max_length=10, unique=True)),
                ('name', models.CharField(max_length=200)),
                ('exchange', models.CharField(blank=True, max_length=50)),
                ('currency', models.CharField(default='USD', max_length=3)),
                ('market_cap', models.BigIntegerField(blank=True, null=True)),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('sector', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='stocks', to='analytics.sector')),
            ],
            options={
                'ordering': ['symbol'],
            },
        ),
        migrations.CreateModel(
            name='UserPortfolio',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('description', models.TextField(blank=True)),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='analytics_portfolios', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['name'],
                'unique_together': {('user', 'name')},
            },
        ),
        migrations.CreateModel(
            name='TechnicalIndicator',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('indicator_type', models.CharField(choices=[('SMA', 'Simple Moving Average'), ('EMA', 'Exponential Moving Average'), ('RSI', 'Relative Strength Index'), ('MACD', 'Moving Average Convergence Divergence'), ('BOLLINGER', 'Bollinger Bands'), ('STOCHASTIC', 'Stochastic Oscillator'), ('ATR', 'Average True Range'), ('WILLIAMS_R', 'Williams %R')], db_index=True, max_length=20)),
                ('calculation_date', models.DateTimeField(db_index=True)),
                ('period', models.IntegerField(blank=True, help_text='Period used for calculation (e.g., 14 for RSI)', null=True)),
                ('fast_period', models.IntegerField(blank=True, help_text='Fast period for MACD', null=True)),
                ('slow_period', models.IntegerField(blank=True, help_text='Slow period for MACD', null=True)),
                ('signal_period', models.IntegerField(blank=True, help_text='Signal period for MACD', null=True)),
                ('std_dev', models.FloatField(blank=True, help_text='Standard deviation multiplier for Bollinger Bands', null=True)),
                ('current_value', models.FloatField(blank=True, help_text='Current indicator value', null=True)),
                ('signal', models.CharField(choices=[('BULLISH', 'Bullish'), ('BEARISH', 'Bearish'), ('NEUTRAL', 'Neutral'), ('OVERBOUGHT', 'Overbought'), ('OVERSOLD', 'Oversold'), ('BUY', 'Buy'), ('SELL', 'Sell'), ('HOLD', 'Hold'), ('STRONG_BUY', 'Strong Buy'), ('STRONG_SELL', 'Strong Sell')], default='NEUTRAL', max_length=20)),
                ('confidence', models.FloatField(default=0.0, help_text='Confidence level of the signal (0-1)', validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(1.0)])),
                ('data', models.JSONField(default=dict, help_text='Additional indicator data in JSON format')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('stock', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='technical_indicators', to='analytics.stock')),
            ],
            options={
                'ordering': ['-calculation_date', 'indicator_type'],
            },
        ),
        migrations.CreateModel(
            name='PriceData',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField(db_index=True)),
                ('open_price', models.DecimalField(decimal_places=4, max_digits=10)),
                ('high_price', models.DecimalField(decimal_places=4, max_digits=10)),
                ('low_price', models.DecimalField(decimal_places=4, max_digits=10)),
                ('close_price', models.DecimalField(decimal_places=4, max_digits=10)),
                ('volume', models.BigIntegerField()),
                ('adjusted_close', models.DecimalField(blank=True, decimal_places=4, max_digits=10, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('stock', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='price_data', to='analytics.stock')),
            ],
            options={
                'ordering': ['-date'],
            },
        ),
        migrations.CreateModel(
            name='PortfolioHolding',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('quantity', models.DecimalField(decimal_places=4, max_digits=10)),
                ('average_cost', models.DecimalField(decimal_places=4, max_digits=10)),
                ('purchase_date', models.DateField()),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('portfolio', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='holdings', to='analytics.userportfolio')),
                ('stock', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='analytics.stock')),
            ],
            options={
                'ordering': ['-purchase_date'],
            },
        ),
        migrations.CreateModel(
            name='AnalysisResult',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('analysis_date', models.DateTimeField(db_index=True)),
                ('analysis_period_months', models.IntegerField(default=6)),
                ('sector_outperformance', models.BooleanField(blank=True, null=True)),
                ('analyst_target_positive', models.BooleanField(blank=True, null=True)),
                ('volatility_acceptable', models.BooleanField(blank=True, null=True)),
                ('stock_return', models.FloatField(blank=True, null=True)),
                ('sector_return', models.FloatField(blank=True, null=True)),
                ('volatility', models.FloatField(blank=True, null=True)),
                ('current_price', models.DecimalField(blank=True, decimal_places=4, max_digits=10, null=True)),
                ('target_price', models.DecimalField(blank=True, decimal_places=4, max_digits=10, null=True)),
                ('fundamental_signal', models.CharField(choices=[('BUY', 'Buy'), ('SELL', 'Sell'), ('HOLD', 'Hold'), ('STRONG_BUY', 'Strong Buy'), ('STRONG_SELL', 'Strong Sell')], default='HOLD', max_length=20)),
                ('technical_signal', models.CharField(choices=[('BUY', 'Buy'), ('SELL', 'Sell'), ('HOLD', 'Hold'), ('STRONG_BUY', 'Strong Buy'), ('STRONG_SELL', 'Strong Sell')], default='HOLD', max_length=20)),
                ('overall_signal', models.CharField(choices=[('BUY', 'Buy'), ('SELL', 'Sell'), ('HOLD', 'Hold'), ('STRONG_BUY', 'Strong Buy'), ('STRONG_SELL', 'Strong Sell')], default='HOLD', max_length=20)),
                ('confidence_score', models.FloatField(default=0.0, validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(1.0)])),
                ('risk_score', models.FloatField(default=0.0, validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(1.0)])),
                ('rationale', models.TextField(blank=True)),
                ('technical_summary', models.TextField(blank=True, help_text='Summary of technical analysis')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('stock', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='analysis_results', to='analytics.stock')),
                ('technical_indicators', models.ManyToManyField(blank=True, help_text='Technical indicators used in this analysis', to='analytics.technicalindicator')),
            ],
            options={
                'ordering': ['-analysis_date'],
            },
        ),
        migrations.AddIndex(
            model_name='technicalindicator',
            index=models.Index(fields=['stock', 'indicator_type', 'calculation_date'], name='analytics_t_stock_i_b8f1ad_idx'),
        ),
        migrations.AddIndex(
            model_name='technicalindicator',
            index=models.Index(fields=['indicator_type', 'calculation_date'], name='analytics_t_indicat_49a4a6_idx'),
        ),
        migrations.AddIndex(
            model_name='technicalindicator',
            index=models.Index(fields=['stock', 'calculation_date'], name='analytics_t_stock_i_1bf8c4_idx'),
        ),
        migrations.AddIndex(
            model_name='technicalindicator',
            index=models.Index(fields=['signal', 'calculation_date'], name='analytics_t_signal_5575e0_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='technicalindicator',
            unique_together={('stock', 'indicator_type', 'calculation_date', 'period', 'fast_period', 'slow_period')},
        ),
        migrations.AddIndex(
            model_name='stock',
            index=models.Index(fields=['symbol', 'is_active'], name='analytics_s_symbol_07e898_idx'),
        ),
        migrations.AddIndex(
            model_name='stock',
            index=models.Index(fields=['sector', 'is_active'], name='analytics_s_sector__a91bff_idx'),
        ),
        migrations.AddIndex(
            model_name='pricedata',
            index=models.Index(fields=['stock', 'date'], name='analytics_p_stock_i_9d7437_idx'),
        ),
        migrations.AddIndex(
            model_name='pricedata',
            index=models.Index(fields=['date'], name='analytics_p_date_cfbccb_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='pricedata',
            unique_together={('stock', 'date')},
        ),
        migrations.AlterUniqueTogether(
            name='portfolioholding',
            unique_together={('portfolio', 'stock')},
        ),
        migrations.AddIndex(
            model_name='analysisresult',
            index=models.Index(fields=['stock', 'analysis_date'], name='analytics_a_stock_i_6cf5d9_idx'),
        ),
        migrations.AddIndex(
            model_name='analysisresult',
            index=models.Index(fields=['overall_signal', 'analysis_date'], name='analytics_a_overall_8f8efb_idx'),
        ),
        migrations.AddIndex(
            model_name='analysisresult',
            index=models.Index(fields=['analysis_date'], name='analytics_a_analysi_933bfb_idx'),
        ),
    ]
